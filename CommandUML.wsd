@startuml CommandUML

interface IActiveShape

interface IClipboard {
    clipboard : LinkedList<IShape>
}
IClipboard --> LinkedList

class LinkedList<T> {
}
LinkedList --> IShape

interface ICommand {
    +execute(): void
}

interface IShape {
}
IShape ..|> IUndoable
IShape ..|> IActiveShape

interface IUndoable {
    +undo(): void
    +redo(): void
}

abstract class APaintCanvas {
    + abstract getGraphics2D() : Graphics2D
}
APaintCanvas --> Graphics2D
APaintCanvas --|> JComponent

class CommandInvoker {
    - static undoStack: Stack<IUndoable>
    - static redoStack: Stack<IUndoable>

    +static add(cmd: IUndoable): void
    +static undo(): boolean
    +static redo(): boolean
}
CommandInvoker --> IUndoable

class Copy {
   +execute(): void
}
Copy ..|> ICommand
Copy ..|> IClipboard
Copy ..|> IActiveShape

class Select {
    - paintCanvas: APaintCanvas
    - startPoint: Point
    - endPoint: Point
    + Select(startPoint: Point, endPoint: Point, paintCanvas: APaintCanvas)
    + execute(): void
    + getPaintCanvas(): APaintCanvas
    + getStartPoint(): Point
    + getEndPoint(): Point
}
Select ..|> ICommand
Select --> Point : Uses
Select --> APaintCanvas : Uses
Select --> SelectHandler : Uses

class SelectHandler {
    - paintCanvas: APaintCanvas
    - startPoint: Point
    - endPoint: Point
    - minimum: Point
    - width: int
    - height: int
    + SelectHandler(startPoint: Point, endPoint: Point, paintCanvas: APaintCanvas)
    + execute(): void
    + getPaintCanvas(): APaintCanvas
    + getStartPoint(): Point
    + getEndPoint(): Point
    {static} + isSelected(): boolean
}
SelectHandler ..|> ICommand
SelectHandler ..|> IActiveShape
SelectHandler --> Point : Uses
SelectHandler --> APaintCanvas : Uses
SelectHandler --> ExistingShape : Uses
SelectHandler --> MoveHandler : Uses
SelectHandler --> IShape : Uses

class Undo {
    + execute(): void
}
Undo ..|> ICommand
Undo --> CommandInvoker

class Redo {
    + execute(): void
}
Redo ..|> ICommand
Redo --> CommandInvoker

class Delete {
   +Delete()
   +execute(): void
   +undo(): void
   +redo(): void
}
Delete --> ICommand
Delete --> IUndoable

class DeletionHandler {
   +DeletionHandler()
   +execute(): void
   +undo(): void
   +redo(): void
}
DeletionHandler --> IActiveShape
DeletionHandler --> IClipboard
DeletionHandler --> IUndoable

class Draw {
   +Draw()
   +execute(): void
}
Draw --> ICommand

class DrawHandler {
   +DrawHandler()
   +handleDraw(): void
}

class Group {
    - shapeGroup: GroupHandler
    
    +execute(): void
    +undo(): void
    +redo(): void
}
Group ..|> ICommand
Group ..|> IUndoable

class GroupHandler {
    - paintCanvas: APaintCanvas
    - graphics2d: Graphics2D
    - shapeToGroup: List<IShape>
    - startPoint: Point
    - endPoint: Point
    - width: int
    - height: int
    - shadeType: String
    - primaryColor: Color
    - secondaryColor: Color
    - startPointX: int
    - startPointY: int
    
    +GroupHandler()
    +GroupHandler(paintCanvas: APaintCanvas)
    +GroupHandler(shapeGroup: GroupHandler)
    +group(): void
    +drawBoundingBox(): void
    +drawShape(): void
    +updateCoordinates(xDelta: int, yDelta: int): void
    +undo(): void
    +redo(): void

    ' Getters, Setters and other utility methods
}
GroupHandler ..|> IShape

class Move {
    - handler: MoveHandler
    - paintCanvas: APaintCanvas
    - startPoint: Point
    - endPoint: Point
    - shapesToMove: LinkedList<IShape>
    - shapesToRemove: LinkedList<IShape>

    + Move(startPoint: Point, endPoint: Point, paintCanvas: APaintCanvas)
    + undo(): void
    + redo(): void
}
Move --> MoveHandler
Move --> Point
Move --> APaintCanvas
Move --> IShape
MoveHandler --> Point
MoveHandler --> APaintCanvas
MoveHandler --> IShape
Move ..|> IUndoable

class MoveHandler {
    - static moveSelected: boolean
    - static undoSelected: boolean
    - static redoSelected: boolean
    - paintCanvas: APaintCanvas
    - xDelta: int
    - yDelta: int
    - startPoint: Point
    - endPoint: Point
    - shapesToMove: LinkedList<IShape>
    - shapesToRemove: LinkedList<IShape>

    + MoveHandler(startPoint: Point, endPoint: Point, paintCanvas: APaintCanvas)
    + execute(): void
    + undo(): void
    + redo(): void

    ' Getters, Setters and other utility methods
}
MoveHandler --> Point
MoveHandler --> APaintCanvas
MoveHandler --> IShape
MoveHandler --> ExistingShape
MoveHandler --> UpdateCanvas
MoveHandler --> CommandInvoker
MoveHandler ..|> ICommand
MoveHandler ..|> IUndoable
MoveHandler ..|> IActiveShape

class Paste {
    - static isPasteSelected: boolean
    - shapetoPaste: LinkedList<IShape>
    - paintCanvas: APaintCanvas
    - handler: PasteHandler

    + Paste()
    + execute(): void
    + undo(): void
    + redo(): void
}
Paste --> APaintCanvas
Paste --> IShape
Paste --> PasteHandler
Paste ..|> IUndoable

class PasteHandler {
    - static isPasteSelected: boolean
    - shapetoPaste: LinkedList<IShape>
    - paintCanvas: APaintCanvas

    + PasteHandler()
    + execute(): void
    + undo(): void
    + redo(): void

    ' Getters, Setters and other utility methods
}
PasteHandler --> Point
PasteHandler --> APaintCanvas
PasteHandler --> IShape
PasteHandler --> ShapeDrawing
PasteHandler --> Rectangle
PasteHandler --> Ellipse
PasteHandler --> Triangle
PasteHandler --> GroupHandler
PasteHandler --> ExistingShape
PasteHandler --> ActiveShape
PasteHandler --> UpdateCanvas
PasteHandler --> CommandInvoker
PasteHandler --> MoveHandler
PasteHandler ..|> IClipboard
PasteHandler ..|> ICommand
PasteHandler ..|> IUndoable

class Ungroup {
    - ungroupHandler: UngroupHandler

    + Ungroup()
    + execute(): void
    + undo(): void
    + redo(): void
}
Ungroup ..|> ICommand
Ungroup ..|> IUndoable
Ungroup --> UngroupHandler : Uses >
Ungroup --> CommandInvoker : Uses >

class UngroupHandler {
    - ungroupedShapes: List<IShape>

    + execute(): void
    + undo(): void
    + redo(): void
}
UngroupHandler --> IShape : Uses >
UngroupHandler --> GroupHandler : Uses >
UngroupHandler --> ActiveShape : Uses >
UngroupHandler --> ExistingShape : Uses >
UngroupHandler --> UpdateCanvas : Uses >
UngroupHandler --> MouseListener : Uses >
MouseListener --> APaintCanvas : Uses >
UpdateCanvas --> APaintCanvas : Uses >

@enduml
